---
title: "Geolocating Sydney's weirdest property"  
subtitle: "Using Open Street Map and R to geolocate an image"
author: "Dean Marchiori"
date: "2023-09-17"
categories: [R, OSM]
image: "featured.png"
editor_options: 
  chunk_output_type: console
execute: 
  echo: false
  warning: false 
  message: false
---  


A defiant Aussie family has refused to sell their farm-land property despite the 
entire neighborhood being converted into a new housing estate.  

Is this real? Where is it? Could I geolocate it using just OSINT^[Open Source Intelligence] techniques?... Yeah of course.    

I have a loose theory that no matter who or where you are, there is probably 
sufficient data for a sufficiently motivated person to find you.    


![](img/img1.png)    

![](img/img2.png)  

## The Challenge  

I saw this pop up on Twitter^[https://x.com/historyinmemes/status/1671673688683413504?s=20] and other tabloid sites a while ago and thought it would be fun to try and geolocate it from the Twitter post alone.    

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">A family in Australia has remained defiant in selling their nearly 5-acre property in the last few years as developers have been forced to build around them. Most recently, they declined a whopping $50 million offer for their home. Slap bang in the middle of a new-build… <a href="https://t.co/pULUqpe1em">pic.twitter.com/pULUqpe1em</a></p>&mdash; Historic Vids (@historyinmemes) <a href="https://twitter.com/historyinmemes/status/1671673688683413504?ref_src=twsrc%5Etfw">June 22, 2023</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

The main clue we get is:  

> About 40 minutes from Sydney’s central core, the property offers panoramic views of the Blue Mountains.   

*(Actually the tweet and some articles do mention the suburb, but let's ignore that so we don't spoil the fun)* 

## The Method  

1. If the property is 40 minutes from Sydney and has views of the Blue Mountains, its likely to be somewhere West of the city.  

![](img/img3.png)

2. We can use the [{osrm}](https://cran.r-project.org/web/packages/osrm/index.html) package in R to construct drive time isochrones. This leverages the Open Source Routing Machine, based on Open Street Map data to calculate polygons that represent a given drive time from a set of coordinates. If we set this as 35-45 min drive time from the center of Sydney, we should get a 'ring' around Sydney containing the property location.    


```{r}
library(osrm)
library(tidyverse)
library(mapview)
library(sf)
library(leaflet)
```

```{r}
iso <- osrmIsochrone(
    loc = c(151.2093, -33.8688),
    breaks = c(35, 45),
    res = 50
)

ring <- iso[2, ] |>
    st_make_valid()

mapview(ring)
```  



3. By looking at the final frame we can see some distinguishing features in the image:    

a) There is a roundabout nearby  
b) There is a 'Secondary Road' (not a primary or trunk road, but more significant than roads found in villages etc) 
c) There are several 'dead-end' roads. Defined as cul-de-sacs that are not turning-circle roundabouts, but have no other exit point.      

![](img/img4.png)   


We can now construct a query to the [OpenStreetMap Overpass API](https://wiki.openstreetmap.org/wiki/Overpass_API) which stores features about the metadata of the street network. Let's look for roundabouts on secondary roads within 500m of a no-exit road.   

```
[out:json];

(  
way[junction=roundabout][highway=secondary]
   ({{bbox}});
  ) -> .roundabout;

(
node[noexit=yes]
 ({{bbox}});
) -> .culdesac;

(
 way.roundabout(around.culdesac:500);
);

out body;
>;
out skel qt;
```


3. The above query was run over all of Sydney, and exported as a `geojson` file, which I then intersected with our drive-time ring above.   

![](img/img7.png) 


```{r}
osm <- read_sf("data/export.geojson")

final_list <- st_intersection(osm, ring)

mapview(final_list, color = "red") +
    mapview(ring)

```  




4. This creates a shortlist of 101 candidate roundabouts. We now need to manually inspect each one to match it to the tweet. 
As these are unsorted, the average search time  to find our roundabout of interest will be $n/2$ 
which means I have have to manually check 50 images on average. To streamline this, I wrote a function to loop
through all the candidate roundabouts, and automatically export a satellite image at roughly the level of zoom that would help 
me identify the right frame.  

```{r}

make_map <- function(input) {
    mapviewOptions(fgb = FALSE)

    aoi <- input

    map <- leaflet(aoi,
        options = leafletOptions(
            minZoom = 17,
            maxZoom = 17
        )
    ) |>
        leaflet::addProviderTiles(providers$Esri.WorldImagery)

    mout <- mapview(aoi, map = map)

    mapshot(mout, file = paste0("output/img", as.numeric(Sys.time()), ".png"))
}
```

```{r}
#| eval: false
for (i in 1:nrow(final_list)) {
    make_map(final_list[i, ])
}
```

![](img/scast.webm)   

## Found it!  

And found it. Don't think I need to share the exact address, not that it's a secret or anything.  

![](img/img5.png)
![](img/img6.png) 


